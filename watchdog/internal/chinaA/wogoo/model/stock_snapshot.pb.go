// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.26.0
// 	protoc        v3.19.3
// source: stock_snapshot.proto

package model

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// 股票快照
type StockSnapshot struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MarketType             uint32         `protobuf:"varint,1,opt,name=marketType,proto3" json:"marketType,omitempty"`                         // 市场代码
	StockId                string         `protobuf:"bytes,2,opt,name=stockId,proto3" json:"stockId,omitempty"`                                // 股票代码
	TradeTime              uint32         `protobuf:"varint,3,opt,name=tradeTime,proto3" json:"tradeTime,omitempty"`                           // 交易时间
	TotalMins              uint32         `protobuf:"varint,4,opt,name=totalMins,proto3" json:"totalMins,omitempty"`                           // 总分钟数
	CurrDisplayPrice       *NumberWrapper `protobuf:"bytes,5,opt,name=currDisplayPrice,proto3" json:"currDisplayPrice,omitempty"`              // 当前展示价格
	CurrCollectPrice       *NumberWrapper `protobuf:"bytes,6,opt,name=currCollectPrice,proto3" json:"currCollectPrice,omitempty"`              // 当前集合价格
	YesterdayClosePrice    *NumberWrapper `protobuf:"bytes,7,opt,name=yesterdayClosePrice,proto3" json:"yesterdayClosePrice,omitempty"`        // 昨收
	LowestPrice            *NumberWrapper `protobuf:"bytes,8,opt,name=lowestPrice,proto3" json:"lowestPrice,omitempty"`                        // 最低价
	LastPrice              *NumberWrapper `protobuf:"bytes,9,opt,name=lastPrice,proto3" json:"lastPrice,omitempty"`                            // 最新价
	OpenPrice              *NumberWrapper `protobuf:"bytes,10,opt,name=openPrice,proto3" json:"openPrice,omitempty"`                           // 开盘价
	ClosePrice             *NumberWrapper `protobuf:"bytes,11,opt,name=closePrice,proto3" json:"closePrice,omitempty"`                         // 收盘价
	HighestPrice           *NumberWrapper `protobuf:"bytes,12,opt,name=highestPrice,proto3" json:"highestPrice,omitempty"`                     // 最高价
	TradeVal               *NumberWrapper `protobuf:"bytes,13,opt,name=tradeVal,proto3" json:"tradeVal,omitempty"`                             // 成交额
	TradeAmount            uint64         `protobuf:"varint,14,opt,name=tradeAmount,proto3" json:"tradeAmount,omitempty"`                      // 成交量
	TradeStatus            int32          `protobuf:"varint,15,opt,name=tradeStatus,proto3" json:"tradeStatus,omitempty"`                      // 交易状态
	TotalVal               *NumberWrapper `protobuf:"bytes,16,opt,name=totalVal,proto3" json:"totalVal,omitempty"`                             // 总市值
	LineNo                 int32          `protobuf:"varint,17,opt,name=lineNo,proto3" json:"lineNo,omitempty"`                                // 线号
	ExchangeRatio          *NumberWrapper `protobuf:"bytes,18,opt,name=exchangeRatio,proto3" json:"exchangeRatio,omitempty"`                   // 换手率
	TradeNum               uint32         `protobuf:"varint,19,opt,name=tradeNum,proto3" json:"tradeNum,omitempty"`                            // 成交笔数
	YesterdayCloseIOPV     *NumberWrapper `protobuf:"bytes,20,opt,name=yesterdayCloseIOPV,proto3" json:"yesterdayCloseIOPV,omitempty"`         // 昨收基金净值
	Iopv                   *NumberWrapper `protobuf:"bytes,21,opt,name=iopv,proto3" json:"iopv,omitempty"`                                     // 基金净值
	DynPERate              *NumberWrapper `protobuf:"bytes,22,opt,name=dynPERate,proto3" json:"dynPERate,omitempty"`                           // 动态市盈率
	PeRate                 *NumberWrapper `protobuf:"bytes,23,opt,name=peRate,proto3" json:"peRate,omitempty"`                                 // 静态市盈率
	PeTTM                  *NumberWrapper `protobuf:"bytes,24,opt,name=peTTM,proto3" json:"peTTM,omitempty"`                                   // 滚动市盈率
	PbRate                 *NumberWrapper `protobuf:"bytes,25,opt,name=pbRate,proto3" json:"pbRate,omitempty"`                                 // 市净率
	RiseCount              uint32         `protobuf:"varint,26,opt,name=riseCount,proto3" json:"riseCount,omitempty"`                          // 涨家数
	FallCount              uint32         `protobuf:"varint,27,opt,name=fallCount,proto3" json:"fallCount,omitempty"`                          // 跌家数
	UnchangeCount          uint32         `protobuf:"varint,28,opt,name=unchangeCount,proto3" json:"unchangeCount,omitempty"`                  // 平家数
	AvgPrice               *NumberWrapper `protobuf:"bytes,29,opt,name=avgPrice,proto3" json:"avgPrice,omitempty"`                             // 均价
	InPlate                uint32         `protobuf:"varint,30,opt,name=inPlate,proto3" json:"inPlate,omitempty"`                              // 内盘
	OutPlate               uint32         `protobuf:"varint,31,opt,name=outPlate,proto3" json:"outPlate,omitempty"`                            // 外盘
	EntrustRate            *NumberWrapper `protobuf:"bytes,32,opt,name=entrustRate,proto3" json:"entrustRate,omitempty"`                       // 委比
	AmountRate             *NumberWrapper `protobuf:"bytes,33,opt,name=amountRate,proto3" json:"amountRate,omitempty"`                         // 量比
	AfterTradeDate         uint32         `protobuf:"varint,34,opt,name=afterTradeDate,proto3" json:"afterTradeDate,omitempty"`                // 盘后交易日期
	AfterTradeTime         uint32         `protobuf:"varint,35,opt,name=afterTradeTime,proto3" json:"afterTradeTime,omitempty"`                // 盘后交易时间
	AfterTradeAmount       uint32         `protobuf:"varint,36,opt,name=afterTradeAmount,proto3" json:"afterTradeAmount,omitempty"`            // 盘后成交量
	AfterTradeVal          *NumberWrapper `protobuf:"bytes,37,opt,name=afterTradeVal,proto3" json:"afterTradeVal,omitempty"`                   // 盘后成交额
	YesterdaySettlePrice   *NumberWrapper `protobuf:"bytes,38,opt,name=yesterdaySettlePrice,proto3" json:"yesterdaySettlePrice,omitempty"`     // 昨日结算价
	YesterdayPosition      uint32         `protobuf:"varint,39,opt,name=yesterdayPosition,proto3" json:"yesterdayPosition,omitempty"`          // 昨日持仓量
	SettlePrice            *NumberWrapper `protobuf:"bytes,40,opt,name=settlePrice,proto3" json:"settlePrice,omitempty"`                       // 结算价
	Position               uint32         `protobuf:"varint,41,opt,name=position,proto3" json:"position,omitempty"`                            // 持仓量
	TotalEntrustBuyAmount  *NumberWrapper `protobuf:"bytes,42,opt,name=totalEntrustBuyAmount,proto3" json:"totalEntrustBuyAmount,omitempty"`   // 总委买比
	TotalEntrustSaleAmount *NumberWrapper `protobuf:"bytes,43,opt,name=totalEntrustSaleAmount,proto3" json:"totalEntrustSaleAmount,omitempty"` // 总委卖比
	WeightAvgBuyPrice      *NumberWrapper `protobuf:"bytes,44,opt,name=weightAvgBuyPrice,proto3" json:"weightAvgBuyPrice,omitempty"`           // 加权平均买价
	WeightAvgSalePrice     *NumberWrapper `protobuf:"bytes,45,opt,name=weightAvgSalePrice,proto3" json:"weightAvgSalePrice,omitempty"`         // 加权平均卖价
	AfterTradePrice        *NumberWrapper `protobuf:"bytes,46,opt,name=afterTradePrice,proto3" json:"afterTradePrice,omitempty"`               //盘后成交价
	MarketDate             uint32         `protobuf:"varint,47,opt,name=marketDate,proto3" json:"marketDate,omitempty"`
	FlowTotalVal           *NumberWrapper `protobuf:"bytes,48,opt,name=flowTotalVal,proto3" json:"flowTotalVal,omitempty"`             // 流通总市值
	Amplitude              *NumberWrapper `protobuf:"bytes,49,opt,name=amplitude,proto3" json:"amplitude,omitempty"`                   // 振幅
	ChangeRate             *NumberWrapper `protobuf:"bytes,50,opt,name=changeRate,proto3" json:"changeRate,omitempty"`                 // 涨跌幅
	PremiumRate            *NumberWrapper `protobuf:"bytes,51,opt,name=premiumRate,proto3" json:"premiumRate,omitempty"`               // 溢价率
	EquitySwapPrice        *NumberWrapper `protobuf:"bytes,52,opt,name=equitySwapPrice,proto3" json:"equitySwapPrice,omitempty"`       // 转股价
	EquitySwapValue        *NumberWrapper `protobuf:"bytes,53,opt,name=equitySwapValue,proto3" json:"equitySwapValue,omitempty"`       // 转股价值
	FreeTotalVal           *NumberWrapper `protobuf:"bytes,54,opt,name=freeTotalVal,proto3" json:"freeTotalVal,omitempty"`             // 实际流通市值
	RealExchangeRatio      *NumberWrapper `protobuf:"bytes,55,opt,name=realExchangeRatio,proto3" json:"realExchangeRatio,omitempty"`   // 真实换手率
	YearChgRatio           *NumberWrapper `protobuf:"bytes,56,opt,name=yearChgRatio,proto3" json:"yearChgRatio,omitempty"`             // 今年涨幅
	Day20ChgRatio          *NumberWrapper `protobuf:"bytes,57,opt,name=day20ChgRatio,proto3" json:"day20ChgRatio,omitempty"`           // 近20日涨幅
	CallAucTradeVal        *NumberWrapper `protobuf:"bytes,58,opt,name=callAucTradeVal,proto3" json:"callAucTradeVal,omitempty"`       // 早盘集合竞价成交额
	HHisPx                 string         `protobuf:"bytes,59,opt,name=hHisPx,proto3" json:"hHisPx,omitempty"`                         // 历史最高价字符串, "前复权,后复权,不复权"
	H52WsPx                string         `protobuf:"bytes,60,opt,name=h52wsPx,proto3" json:"h52wsPx,omitempty"`                       // 52周最高价字符串, "前复权,后复权,不复权"
	L52WsPx                string         `protobuf:"bytes,61,opt,name=l52wsPx,proto3" json:"l52wsPx,omitempty"`                       // 52周最低价字符串, "前复权,后复权,不复权"
	StockDividendRatio     *NumberWrapper `protobuf:"bytes,62,opt,name=stockDividendRatio,proto3" json:"stockDividendRatio,omitempty"` //股息率
	AvailableUseDate       uint32         `protobuf:"varint,63,opt,name=availableUseDate,proto3" json:"availableUseDate,omitempty"`    // 可用日期
	ExpectedRevenue        *NumberWrapper `protobuf:"bytes,64,opt,name=expectedRevenue,proto3" json:"expectedRevenue,omitempty"`       // 预期收益
}

func (x *StockSnapshot) Reset() {
	*x = StockSnapshot{}
	if protoimpl.UnsafeEnabled {
		mi := &file_stock_snapshot_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StockSnapshot) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StockSnapshot) ProtoMessage() {}

func (x *StockSnapshot) ProtoReflect() protoreflect.Message {
	mi := &file_stock_snapshot_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StockSnapshot.ProtoReflect.Descriptor instead.
func (*StockSnapshot) Descriptor() ([]byte, []int) {
	return file_stock_snapshot_proto_rawDescGZIP(), []int{0}
}

func (x *StockSnapshot) GetMarketType() uint32 {
	if x != nil {
		return x.MarketType
	}
	return 0
}

func (x *StockSnapshot) GetStockId() string {
	if x != nil {
		return x.StockId
	}
	return ""
}

func (x *StockSnapshot) GetTradeTime() uint32 {
	if x != nil {
		return x.TradeTime
	}
	return 0
}

func (x *StockSnapshot) GetTotalMins() uint32 {
	if x != nil {
		return x.TotalMins
	}
	return 0
}

func (x *StockSnapshot) GetCurrDisplayPrice() *NumberWrapper {
	if x != nil {
		return x.CurrDisplayPrice
	}
	return nil
}

func (x *StockSnapshot) GetCurrCollectPrice() *NumberWrapper {
	if x != nil {
		return x.CurrCollectPrice
	}
	return nil
}

func (x *StockSnapshot) GetYesterdayClosePrice() *NumberWrapper {
	if x != nil {
		return x.YesterdayClosePrice
	}
	return nil
}

func (x *StockSnapshot) GetLowestPrice() *NumberWrapper {
	if x != nil {
		return x.LowestPrice
	}
	return nil
}

func (x *StockSnapshot) GetLastPrice() *NumberWrapper {
	if x != nil {
		return x.LastPrice
	}
	return nil
}

func (x *StockSnapshot) GetOpenPrice() *NumberWrapper {
	if x != nil {
		return x.OpenPrice
	}
	return nil
}

func (x *StockSnapshot) GetClosePrice() *NumberWrapper {
	if x != nil {
		return x.ClosePrice
	}
	return nil
}

func (x *StockSnapshot) GetHighestPrice() *NumberWrapper {
	if x != nil {
		return x.HighestPrice
	}
	return nil
}

func (x *StockSnapshot) GetTradeVal() *NumberWrapper {
	if x != nil {
		return x.TradeVal
	}
	return nil
}

func (x *StockSnapshot) GetTradeAmount() uint64 {
	if x != nil {
		return x.TradeAmount
	}
	return 0
}

func (x *StockSnapshot) GetTradeStatus() int32 {
	if x != nil {
		return x.TradeStatus
	}
	return 0
}

func (x *StockSnapshot) GetTotalVal() *NumberWrapper {
	if x != nil {
		return x.TotalVal
	}
	return nil
}

func (x *StockSnapshot) GetLineNo() int32 {
	if x != nil {
		return x.LineNo
	}
	return 0
}

func (x *StockSnapshot) GetExchangeRatio() *NumberWrapper {
	if x != nil {
		return x.ExchangeRatio
	}
	return nil
}

func (x *StockSnapshot) GetTradeNum() uint32 {
	if x != nil {
		return x.TradeNum
	}
	return 0
}

func (x *StockSnapshot) GetYesterdayCloseIOPV() *NumberWrapper {
	if x != nil {
		return x.YesterdayCloseIOPV
	}
	return nil
}

func (x *StockSnapshot) GetIopv() *NumberWrapper {
	if x != nil {
		return x.Iopv
	}
	return nil
}

func (x *StockSnapshot) GetDynPERate() *NumberWrapper {
	if x != nil {
		return x.DynPERate
	}
	return nil
}

func (x *StockSnapshot) GetPeRate() *NumberWrapper {
	if x != nil {
		return x.PeRate
	}
	return nil
}

func (x *StockSnapshot) GetPeTTM() *NumberWrapper {
	if x != nil {
		return x.PeTTM
	}
	return nil
}

func (x *StockSnapshot) GetPbRate() *NumberWrapper {
	if x != nil {
		return x.PbRate
	}
	return nil
}

func (x *StockSnapshot) GetRiseCount() uint32 {
	if x != nil {
		return x.RiseCount
	}
	return 0
}

func (x *StockSnapshot) GetFallCount() uint32 {
	if x != nil {
		return x.FallCount
	}
	return 0
}

func (x *StockSnapshot) GetUnchangeCount() uint32 {
	if x != nil {
		return x.UnchangeCount
	}
	return 0
}

func (x *StockSnapshot) GetAvgPrice() *NumberWrapper {
	if x != nil {
		return x.AvgPrice
	}
	return nil
}

func (x *StockSnapshot) GetInPlate() uint32 {
	if x != nil {
		return x.InPlate
	}
	return 0
}

func (x *StockSnapshot) GetOutPlate() uint32 {
	if x != nil {
		return x.OutPlate
	}
	return 0
}

func (x *StockSnapshot) GetEntrustRate() *NumberWrapper {
	if x != nil {
		return x.EntrustRate
	}
	return nil
}

func (x *StockSnapshot) GetAmountRate() *NumberWrapper {
	if x != nil {
		return x.AmountRate
	}
	return nil
}

func (x *StockSnapshot) GetAfterTradeDate() uint32 {
	if x != nil {
		return x.AfterTradeDate
	}
	return 0
}

func (x *StockSnapshot) GetAfterTradeTime() uint32 {
	if x != nil {
		return x.AfterTradeTime
	}
	return 0
}

func (x *StockSnapshot) GetAfterTradeAmount() uint32 {
	if x != nil {
		return x.AfterTradeAmount
	}
	return 0
}

func (x *StockSnapshot) GetAfterTradeVal() *NumberWrapper {
	if x != nil {
		return x.AfterTradeVal
	}
	return nil
}

func (x *StockSnapshot) GetYesterdaySettlePrice() *NumberWrapper {
	if x != nil {
		return x.YesterdaySettlePrice
	}
	return nil
}

func (x *StockSnapshot) GetYesterdayPosition() uint32 {
	if x != nil {
		return x.YesterdayPosition
	}
	return 0
}

func (x *StockSnapshot) GetSettlePrice() *NumberWrapper {
	if x != nil {
		return x.SettlePrice
	}
	return nil
}

func (x *StockSnapshot) GetPosition() uint32 {
	if x != nil {
		return x.Position
	}
	return 0
}

func (x *StockSnapshot) GetTotalEntrustBuyAmount() *NumberWrapper {
	if x != nil {
		return x.TotalEntrustBuyAmount
	}
	return nil
}

func (x *StockSnapshot) GetTotalEntrustSaleAmount() *NumberWrapper {
	if x != nil {
		return x.TotalEntrustSaleAmount
	}
	return nil
}

func (x *StockSnapshot) GetWeightAvgBuyPrice() *NumberWrapper {
	if x != nil {
		return x.WeightAvgBuyPrice
	}
	return nil
}

func (x *StockSnapshot) GetWeightAvgSalePrice() *NumberWrapper {
	if x != nil {
		return x.WeightAvgSalePrice
	}
	return nil
}

func (x *StockSnapshot) GetAfterTradePrice() *NumberWrapper {
	if x != nil {
		return x.AfterTradePrice
	}
	return nil
}

func (x *StockSnapshot) GetMarketDate() uint32 {
	if x != nil {
		return x.MarketDate
	}
	return 0
}

func (x *StockSnapshot) GetFlowTotalVal() *NumberWrapper {
	if x != nil {
		return x.FlowTotalVal
	}
	return nil
}

func (x *StockSnapshot) GetAmplitude() *NumberWrapper {
	if x != nil {
		return x.Amplitude
	}
	return nil
}

func (x *StockSnapshot) GetChangeRate() *NumberWrapper {
	if x != nil {
		return x.ChangeRate
	}
	return nil
}

func (x *StockSnapshot) GetPremiumRate() *NumberWrapper {
	if x != nil {
		return x.PremiumRate
	}
	return nil
}

func (x *StockSnapshot) GetEquitySwapPrice() *NumberWrapper {
	if x != nil {
		return x.EquitySwapPrice
	}
	return nil
}

func (x *StockSnapshot) GetEquitySwapValue() *NumberWrapper {
	if x != nil {
		return x.EquitySwapValue
	}
	return nil
}

func (x *StockSnapshot) GetFreeTotalVal() *NumberWrapper {
	if x != nil {
		return x.FreeTotalVal
	}
	return nil
}

func (x *StockSnapshot) GetRealExchangeRatio() *NumberWrapper {
	if x != nil {
		return x.RealExchangeRatio
	}
	return nil
}

func (x *StockSnapshot) GetYearChgRatio() *NumberWrapper {
	if x != nil {
		return x.YearChgRatio
	}
	return nil
}

func (x *StockSnapshot) GetDay20ChgRatio() *NumberWrapper {
	if x != nil {
		return x.Day20ChgRatio
	}
	return nil
}

func (x *StockSnapshot) GetCallAucTradeVal() *NumberWrapper {
	if x != nil {
		return x.CallAucTradeVal
	}
	return nil
}

func (x *StockSnapshot) GetHHisPx() string {
	if x != nil {
		return x.HHisPx
	}
	return ""
}

func (x *StockSnapshot) GetH52WsPx() string {
	if x != nil {
		return x.H52WsPx
	}
	return ""
}

func (x *StockSnapshot) GetL52WsPx() string {
	if x != nil {
		return x.L52WsPx
	}
	return ""
}

func (x *StockSnapshot) GetStockDividendRatio() *NumberWrapper {
	if x != nil {
		return x.StockDividendRatio
	}
	return nil
}

func (x *StockSnapshot) GetAvailableUseDate() uint32 {
	if x != nil {
		return x.AvailableUseDate
	}
	return 0
}

func (x *StockSnapshot) GetExpectedRevenue() *NumberWrapper {
	if x != nil {
		return x.ExpectedRevenue
	}
	return nil
}

var File_stock_snapshot_proto protoreflect.FileDescriptor

var file_stock_snapshot_proto_rawDesc = []byte{
	0x0a, 0x14, 0x73, 0x74, 0x6f, 0x63, 0x6b, 0x5f, 0x73, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x05, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x1a, 0x14, 0x6e,
	0x75, 0x6d, 0x62, 0x65, 0x72, 0x5f, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x22, 0xf3, 0x18, 0x0a, 0x0d, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x53, 0x6e, 0x61,
	0x70, 0x73, 0x68, 0x6f, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x54,
	0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x6d, 0x61, 0x72, 0x6b, 0x65,
	0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x74, 0x6f, 0x63, 0x6b, 0x49, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x73, 0x74, 0x6f, 0x63, 0x6b, 0x49, 0x64, 0x12,
	0x1c, 0x0a, 0x09, 0x74, 0x72, 0x61, 0x64, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x09, 0x74, 0x72, 0x61, 0x64, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1c, 0x0a,
	0x09, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x4d, 0x69, 0x6e, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x09, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x4d, 0x69, 0x6e, 0x73, 0x12, 0x40, 0x0a, 0x10, 0x63,
	0x75, 0x72, 0x72, 0x44, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x50, 0x72, 0x69, 0x63, 0x65, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x4e, 0x75,
	0x6d, 0x62, 0x65, 0x72, 0x57, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x52, 0x10, 0x63, 0x75, 0x72,
	0x72, 0x44, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x40, 0x0a,
	0x10, 0x63, 0x75, 0x72, 0x72, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x50, 0x72, 0x69, 0x63,
	0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e,
	0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x57, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x52, 0x10, 0x63,
	0x75, 0x72, 0x72, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12,
	0x46, 0x0a, 0x13, 0x79, 0x65, 0x73, 0x74, 0x65, 0x72, 0x64, 0x61, 0x79, 0x43, 0x6c, 0x6f, 0x73,
	0x65, 0x50, 0x72, 0x69, 0x63, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x6d,
	0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x57, 0x72, 0x61, 0x70, 0x70,
	0x65, 0x72, 0x52, 0x13, 0x79, 0x65, 0x73, 0x74, 0x65, 0x72, 0x64, 0x61, 0x79, 0x43, 0x6c, 0x6f,
	0x73, 0x65, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x36, 0x0a, 0x0b, 0x6c, 0x6f, 0x77, 0x65, 0x73,
	0x74, 0x50, 0x72, 0x69, 0x63, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x6d,
	0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x57, 0x72, 0x61, 0x70, 0x70,
	0x65, 0x72, 0x52, 0x0b, 0x6c, 0x6f, 0x77, 0x65, 0x73, 0x74, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12,
	0x32, 0x0a, 0x09, 0x6c, 0x61, 0x73, 0x74, 0x50, 0x72, 0x69, 0x63, 0x65, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x14, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x4e, 0x75, 0x6d, 0x62, 0x65,
	0x72, 0x57, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x52, 0x09, 0x6c, 0x61, 0x73, 0x74, 0x50, 0x72,
	0x69, 0x63, 0x65, 0x12, 0x32, 0x0a, 0x09, 0x6f, 0x70, 0x65, 0x6e, 0x50, 0x72, 0x69, 0x63, 0x65,
	0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x4e,
	0x75, 0x6d, 0x62, 0x65, 0x72, 0x57, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x52, 0x09, 0x6f, 0x70,
	0x65, 0x6e, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x34, 0x0a, 0x0a, 0x63, 0x6c, 0x6f, 0x73, 0x65,
	0x50, 0x72, 0x69, 0x63, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x6d, 0x6f,
	0x64, 0x65, 0x6c, 0x2e, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x57, 0x72, 0x61, 0x70, 0x70, 0x65,
	0x72, 0x52, 0x0a, 0x63, 0x6c, 0x6f, 0x73, 0x65, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x38, 0x0a,
	0x0c, 0x68, 0x69, 0x67, 0x68, 0x65, 0x73, 0x74, 0x50, 0x72, 0x69, 0x63, 0x65, 0x18, 0x0c, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x4e, 0x75, 0x6d, 0x62,
	0x65, 0x72, 0x57, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x52, 0x0c, 0x68, 0x69, 0x67, 0x68, 0x65,
	0x73, 0x74, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x30, 0x0a, 0x08, 0x74, 0x72, 0x61, 0x64, 0x65,
	0x56, 0x61, 0x6c, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x6d, 0x6f, 0x64, 0x65,
	0x6c, 0x2e, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x57, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x52,
	0x08, 0x74, 0x72, 0x61, 0x64, 0x65, 0x56, 0x61, 0x6c, 0x12, 0x20, 0x0a, 0x0b, 0x74, 0x72, 0x61,
	0x64, 0x65, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0b,
	0x74, 0x72, 0x61, 0x64, 0x65, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x20, 0x0a, 0x0b, 0x74,
	0x72, 0x61, 0x64, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x0b, 0x74, 0x72, 0x61, 0x64, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x30, 0x0a,
	0x08, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x56, 0x61, 0x6c, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x14, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x57, 0x72,
	0x61, 0x70, 0x70, 0x65, 0x72, 0x52, 0x08, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x56, 0x61, 0x6c, 0x12,
	0x16, 0x0a, 0x06, 0x6c, 0x69, 0x6e, 0x65, 0x4e, 0x6f, 0x18, 0x11, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x06, 0x6c, 0x69, 0x6e, 0x65, 0x4e, 0x6f, 0x12, 0x3a, 0x0a, 0x0d, 0x65, 0x78, 0x63, 0x68, 0x61,
	0x6e, 0x67, 0x65, 0x52, 0x61, 0x74, 0x69, 0x6f, 0x18, 0x12, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14,
	0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x57, 0x72, 0x61,
	0x70, 0x70, 0x65, 0x72, 0x52, 0x0d, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x61,
	0x74, 0x69, 0x6f, 0x12, 0x1a, 0x0a, 0x08, 0x74, 0x72, 0x61, 0x64, 0x65, 0x4e, 0x75, 0x6d, 0x18,
	0x13, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x74, 0x72, 0x61, 0x64, 0x65, 0x4e, 0x75, 0x6d, 0x12,
	0x44, 0x0a, 0x12, 0x79, 0x65, 0x73, 0x74, 0x65, 0x72, 0x64, 0x61, 0x79, 0x43, 0x6c, 0x6f, 0x73,
	0x65, 0x49, 0x4f, 0x50, 0x56, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x6d, 0x6f,
	0x64, 0x65, 0x6c, 0x2e, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x57, 0x72, 0x61, 0x70, 0x70, 0x65,
	0x72, 0x52, 0x12, 0x79, 0x65, 0x73, 0x74, 0x65, 0x72, 0x64, 0x61, 0x79, 0x43, 0x6c, 0x6f, 0x73,
	0x65, 0x49, 0x4f, 0x50, 0x56, 0x12, 0x28, 0x0a, 0x04, 0x69, 0x6f, 0x70, 0x76, 0x18, 0x15, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x4e, 0x75, 0x6d, 0x62,
	0x65, 0x72, 0x57, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x52, 0x04, 0x69, 0x6f, 0x70, 0x76, 0x12,
	0x32, 0x0a, 0x09, 0x64, 0x79, 0x6e, 0x50, 0x45, 0x52, 0x61, 0x74, 0x65, 0x18, 0x16, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x14, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x4e, 0x75, 0x6d, 0x62, 0x65,
	0x72, 0x57, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x52, 0x09, 0x64, 0x79, 0x6e, 0x50, 0x45, 0x52,
	0x61, 0x74, 0x65, 0x12, 0x2c, 0x0a, 0x06, 0x70, 0x65, 0x52, 0x61, 0x74, 0x65, 0x18, 0x17, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x4e, 0x75, 0x6d, 0x62,
	0x65, 0x72, 0x57, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x52, 0x06, 0x70, 0x65, 0x52, 0x61, 0x74,
	0x65, 0x12, 0x2a, 0x0a, 0x05, 0x70, 0x65, 0x54, 0x54, 0x4d, 0x18, 0x18, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x14, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x57,
	0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x52, 0x05, 0x70, 0x65, 0x54, 0x54, 0x4d, 0x12, 0x2c, 0x0a,
	0x06, 0x70, 0x62, 0x52, 0x61, 0x74, 0x65, 0x18, 0x19, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e,
	0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x57, 0x72, 0x61, 0x70,
	0x70, 0x65, 0x72, 0x52, 0x06, 0x70, 0x62, 0x52, 0x61, 0x74, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x72,
	0x69, 0x73, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09,
	0x72, 0x69, 0x73, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x66, 0x61, 0x6c,
	0x6c, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x66, 0x61,
	0x6c, 0x6c, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x24, 0x0a, 0x0d, 0x75, 0x6e, 0x63, 0x68, 0x61,
	0x6e, 0x67, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x1c, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d,
	0x75, 0x6e, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x30, 0x0a,
	0x08, 0x61, 0x76, 0x67, 0x50, 0x72, 0x69, 0x63, 0x65, 0x18, 0x1d, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x14, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x57, 0x72,
	0x61, 0x70, 0x70, 0x65, 0x72, 0x52, 0x08, 0x61, 0x76, 0x67, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12,
	0x18, 0x0a, 0x07, 0x69, 0x6e, 0x50, 0x6c, 0x61, 0x74, 0x65, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x07, 0x69, 0x6e, 0x50, 0x6c, 0x61, 0x74, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x6f, 0x75, 0x74,
	0x50, 0x6c, 0x61, 0x74, 0x65, 0x18, 0x1f, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x6f, 0x75, 0x74,
	0x50, 0x6c, 0x61, 0x74, 0x65, 0x12, 0x36, 0x0a, 0x0b, 0x65, 0x6e, 0x74, 0x72, 0x75, 0x73, 0x74,
	0x52, 0x61, 0x74, 0x65, 0x18, 0x20, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x6d, 0x6f, 0x64,
	0x65, 0x6c, 0x2e, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x57, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72,
	0x52, 0x0b, 0x65, 0x6e, 0x74, 0x72, 0x75, 0x73, 0x74, 0x52, 0x61, 0x74, 0x65, 0x12, 0x34, 0x0a,
	0x0a, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x61, 0x74, 0x65, 0x18, 0x21, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x14, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72,
	0x57, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x52, 0x0a, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x52,
	0x61, 0x74, 0x65, 0x12, 0x26, 0x0a, 0x0e, 0x61, 0x66, 0x74, 0x65, 0x72, 0x54, 0x72, 0x61, 0x64,
	0x65, 0x44, 0x61, 0x74, 0x65, 0x18, 0x22, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e, 0x61, 0x66, 0x74,
	0x65, 0x72, 0x54, 0x72, 0x61, 0x64, 0x65, 0x44, 0x61, 0x74, 0x65, 0x12, 0x26, 0x0a, 0x0e, 0x61,
	0x66, 0x74, 0x65, 0x72, 0x54, 0x72, 0x61, 0x64, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x23, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x0e, 0x61, 0x66, 0x74, 0x65, 0x72, 0x54, 0x72, 0x61, 0x64, 0x65, 0x54,
	0x69, 0x6d, 0x65, 0x12, 0x2a, 0x0a, 0x10, 0x61, 0x66, 0x74, 0x65, 0x72, 0x54, 0x72, 0x61, 0x64,
	0x65, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x24, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x10, 0x61,
	0x66, 0x74, 0x65, 0x72, 0x54, 0x72, 0x61, 0x64, 0x65, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12,
	0x3a, 0x0a, 0x0d, 0x61, 0x66, 0x74, 0x65, 0x72, 0x54, 0x72, 0x61, 0x64, 0x65, 0x56, 0x61, 0x6c,
	0x18, 0x25, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x4e,
	0x75, 0x6d, 0x62, 0x65, 0x72, 0x57, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x52, 0x0d, 0x61, 0x66,
	0x74, 0x65, 0x72, 0x54, 0x72, 0x61, 0x64, 0x65, 0x56, 0x61, 0x6c, 0x12, 0x48, 0x0a, 0x14, 0x79,
	0x65, 0x73, 0x74, 0x65, 0x72, 0x64, 0x61, 0x79, 0x53, 0x65, 0x74, 0x74, 0x6c, 0x65, 0x50, 0x72,
	0x69, 0x63, 0x65, 0x18, 0x26, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x6d, 0x6f, 0x64, 0x65,
	0x6c, 0x2e, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x57, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x52,
	0x14, 0x79, 0x65, 0x73, 0x74, 0x65, 0x72, 0x64, 0x61, 0x79, 0x53, 0x65, 0x74, 0x74, 0x6c, 0x65,
	0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x2c, 0x0a, 0x11, 0x79, 0x65, 0x73, 0x74, 0x65, 0x72, 0x64,
	0x61, 0x79, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x27, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x11, 0x79, 0x65, 0x73, 0x74, 0x65, 0x72, 0x64, 0x61, 0x79, 0x50, 0x6f, 0x73, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x36, 0x0a, 0x0b, 0x73, 0x65, 0x74, 0x74, 0x6c, 0x65, 0x50, 0x72, 0x69,
	0x63, 0x65, 0x18, 0x28, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c,
	0x2e, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x57, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x52, 0x0b,
	0x73, 0x65, 0x74, 0x74, 0x6c, 0x65, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x70,
	0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x29, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x70,
	0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x4a, 0x0a, 0x15, 0x74, 0x6f, 0x74, 0x61, 0x6c,
	0x45, 0x6e, 0x74, 0x72, 0x75, 0x73, 0x74, 0x42, 0x75, 0x79, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74,
	0x18, 0x2a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x4e,
	0x75, 0x6d, 0x62, 0x65, 0x72, 0x57, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x52, 0x15, 0x74, 0x6f,
	0x74, 0x61, 0x6c, 0x45, 0x6e, 0x74, 0x72, 0x75, 0x73, 0x74, 0x42, 0x75, 0x79, 0x41, 0x6d, 0x6f,
	0x75, 0x6e, 0x74, 0x12, 0x4c, 0x0a, 0x16, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x45, 0x6e, 0x74, 0x72,
	0x75, 0x73, 0x74, 0x53, 0x61, 0x6c, 0x65, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x2b, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x4e, 0x75, 0x6d, 0x62,
	0x65, 0x72, 0x57, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x52, 0x16, 0x74, 0x6f, 0x74, 0x61, 0x6c,
	0x45, 0x6e, 0x74, 0x72, 0x75, 0x73, 0x74, 0x53, 0x61, 0x6c, 0x65, 0x41, 0x6d, 0x6f, 0x75, 0x6e,
	0x74, 0x12, 0x42, 0x0a, 0x11, 0x77, 0x65, 0x69, 0x67, 0x68, 0x74, 0x41, 0x76, 0x67, 0x42, 0x75,
	0x79, 0x50, 0x72, 0x69, 0x63, 0x65, 0x18, 0x2c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x6d,
	0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x57, 0x72, 0x61, 0x70, 0x70,
	0x65, 0x72, 0x52, 0x11, 0x77, 0x65, 0x69, 0x67, 0x68, 0x74, 0x41, 0x76, 0x67, 0x42, 0x75, 0x79,
	0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x44, 0x0a, 0x12, 0x77, 0x65, 0x69, 0x67, 0x68, 0x74, 0x41,
	0x76, 0x67, 0x53, 0x61, 0x6c, 0x65, 0x50, 0x72, 0x69, 0x63, 0x65, 0x18, 0x2d, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x14, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72,
	0x57, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x52, 0x12, 0x77, 0x65, 0x69, 0x67, 0x68, 0x74, 0x41,
	0x76, 0x67, 0x53, 0x61, 0x6c, 0x65, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x3e, 0x0a, 0x0f, 0x61,
	0x66, 0x74, 0x65, 0x72, 0x54, 0x72, 0x61, 0x64, 0x65, 0x50, 0x72, 0x69, 0x63, 0x65, 0x18, 0x2e,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x4e, 0x75, 0x6d,
	0x62, 0x65, 0x72, 0x57, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x52, 0x0f, 0x61, 0x66, 0x74, 0x65,
	0x72, 0x54, 0x72, 0x61, 0x64, 0x65, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x6d,
	0x61, 0x72, 0x6b, 0x65, 0x74, 0x44, 0x61, 0x74, 0x65, 0x18, 0x2f, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x0a, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x44, 0x61, 0x74, 0x65, 0x12, 0x38, 0x0a, 0x0c, 0x66,
	0x6c, 0x6f, 0x77, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x56, 0x61, 0x6c, 0x18, 0x30, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x14, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72,
	0x57, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x52, 0x0c, 0x66, 0x6c, 0x6f, 0x77, 0x54, 0x6f, 0x74,
	0x61, 0x6c, 0x56, 0x61, 0x6c, 0x12, 0x32, 0x0a, 0x09, 0x61, 0x6d, 0x70, 0x6c, 0x69, 0x74, 0x75,
	0x64, 0x65, 0x18, 0x31, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c,
	0x2e, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x57, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x52, 0x09,
	0x61, 0x6d, 0x70, 0x6c, 0x69, 0x74, 0x75, 0x64, 0x65, 0x12, 0x34, 0x0a, 0x0a, 0x63, 0x68, 0x61,
	0x6e, 0x67, 0x65, 0x52, 0x61, 0x74, 0x65, 0x18, 0x32, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e,
	0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x57, 0x72, 0x61, 0x70,
	0x70, 0x65, 0x72, 0x52, 0x0a, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x61, 0x74, 0x65, 0x12,
	0x36, 0x0a, 0x0b, 0x70, 0x72, 0x65, 0x6d, 0x69, 0x75, 0x6d, 0x52, 0x61, 0x74, 0x65, 0x18, 0x33,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x4e, 0x75, 0x6d,
	0x62, 0x65, 0x72, 0x57, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x52, 0x0b, 0x70, 0x72, 0x65, 0x6d,
	0x69, 0x75, 0x6d, 0x52, 0x61, 0x74, 0x65, 0x12, 0x3e, 0x0a, 0x0f, 0x65, 0x71, 0x75, 0x69, 0x74,
	0x79, 0x53, 0x77, 0x61, 0x70, 0x50, 0x72, 0x69, 0x63, 0x65, 0x18, 0x34, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x14, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x57,
	0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x52, 0x0f, 0x65, 0x71, 0x75, 0x69, 0x74, 0x79, 0x53, 0x77,
	0x61, 0x70, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x3e, 0x0a, 0x0f, 0x65, 0x71, 0x75, 0x69, 0x74,
	0x79, 0x53, 0x77, 0x61, 0x70, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x35, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x14, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x57,
	0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x52, 0x0f, 0x65, 0x71, 0x75, 0x69, 0x74, 0x79, 0x53, 0x77,
	0x61, 0x70, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x38, 0x0a, 0x0c, 0x66, 0x72, 0x65, 0x65, 0x54,
	0x6f, 0x74, 0x61, 0x6c, 0x56, 0x61, 0x6c, 0x18, 0x36, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e,
	0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x57, 0x72, 0x61, 0x70,
	0x70, 0x65, 0x72, 0x52, 0x0c, 0x66, 0x72, 0x65, 0x65, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x56, 0x61,
	0x6c, 0x12, 0x42, 0x0a, 0x11, 0x72, 0x65, 0x61, 0x6c, 0x45, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67,
	0x65, 0x52, 0x61, 0x74, 0x69, 0x6f, 0x18, 0x37, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x6d,
	0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x57, 0x72, 0x61, 0x70, 0x70,
	0x65, 0x72, 0x52, 0x11, 0x72, 0x65, 0x61, 0x6c, 0x45, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65,
	0x52, 0x61, 0x74, 0x69, 0x6f, 0x12, 0x38, 0x0a, 0x0c, 0x79, 0x65, 0x61, 0x72, 0x43, 0x68, 0x67,
	0x52, 0x61, 0x74, 0x69, 0x6f, 0x18, 0x38, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x6d, 0x6f,
	0x64, 0x65, 0x6c, 0x2e, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x57, 0x72, 0x61, 0x70, 0x70, 0x65,
	0x72, 0x52, 0x0c, 0x79, 0x65, 0x61, 0x72, 0x43, 0x68, 0x67, 0x52, 0x61, 0x74, 0x69, 0x6f, 0x12,
	0x3a, 0x0a, 0x0d, 0x64, 0x61, 0x79, 0x32, 0x30, 0x43, 0x68, 0x67, 0x52, 0x61, 0x74, 0x69, 0x6f,
	0x18, 0x39, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x4e,
	0x75, 0x6d, 0x62, 0x65, 0x72, 0x57, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x52, 0x0d, 0x64, 0x61,
	0x79, 0x32, 0x30, 0x43, 0x68, 0x67, 0x52, 0x61, 0x74, 0x69, 0x6f, 0x12, 0x3e, 0x0a, 0x0f, 0x63,
	0x61, 0x6c, 0x6c, 0x41, 0x75, 0x63, 0x54, 0x72, 0x61, 0x64, 0x65, 0x56, 0x61, 0x6c, 0x18, 0x3a,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x4e, 0x75, 0x6d,
	0x62, 0x65, 0x72, 0x57, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x52, 0x0f, 0x63, 0x61, 0x6c, 0x6c,
	0x41, 0x75, 0x63, 0x54, 0x72, 0x61, 0x64, 0x65, 0x56, 0x61, 0x6c, 0x12, 0x16, 0x0a, 0x06, 0x68,
	0x48, 0x69, 0x73, 0x50, 0x78, 0x18, 0x3b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x68, 0x48, 0x69,
	0x73, 0x50, 0x78, 0x12, 0x18, 0x0a, 0x07, 0x68, 0x35, 0x32, 0x77, 0x73, 0x50, 0x78, 0x18, 0x3c,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x68, 0x35, 0x32, 0x77, 0x73, 0x50, 0x78, 0x12, 0x18, 0x0a,
	0x07, 0x6c, 0x35, 0x32, 0x77, 0x73, 0x50, 0x78, 0x18, 0x3d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x6c, 0x35, 0x32, 0x77, 0x73, 0x50, 0x78, 0x12, 0x44, 0x0a, 0x12, 0x73, 0x74, 0x6f, 0x63, 0x6b,
	0x44, 0x69, 0x76, 0x69, 0x64, 0x65, 0x6e, 0x64, 0x52, 0x61, 0x74, 0x69, 0x6f, 0x18, 0x3e, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x4e, 0x75, 0x6d, 0x62,
	0x65, 0x72, 0x57, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x52, 0x12, 0x73, 0x74, 0x6f, 0x63, 0x6b,
	0x44, 0x69, 0x76, 0x69, 0x64, 0x65, 0x6e, 0x64, 0x52, 0x61, 0x74, 0x69, 0x6f, 0x12, 0x2a, 0x0a,
	0x10, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x55, 0x73, 0x65, 0x44, 0x61, 0x74,
	0x65, 0x18, 0x3f, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x10, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62,
	0x6c, 0x65, 0x55, 0x73, 0x65, 0x44, 0x61, 0x74, 0x65, 0x12, 0x3e, 0x0a, 0x0f, 0x65, 0x78, 0x70,
	0x65, 0x63, 0x74, 0x65, 0x64, 0x52, 0x65, 0x76, 0x65, 0x6e, 0x75, 0x65, 0x18, 0x40, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x14, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x4e, 0x75, 0x6d, 0x62, 0x65,
	0x72, 0x57, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x52, 0x0f, 0x65, 0x78, 0x70, 0x65, 0x63, 0x74,
	0x65, 0x64, 0x52, 0x65, 0x76, 0x65, 0x6e, 0x75, 0x65, 0x42, 0x09, 0x5a, 0x07, 0x2e, 0x2f, 0x6d,
	0x6f, 0x64, 0x65, 0x6c, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_stock_snapshot_proto_rawDescOnce sync.Once
	file_stock_snapshot_proto_rawDescData = file_stock_snapshot_proto_rawDesc
)

func file_stock_snapshot_proto_rawDescGZIP() []byte {
	file_stock_snapshot_proto_rawDescOnce.Do(func() {
		file_stock_snapshot_proto_rawDescData = protoimpl.X.CompressGZIP(file_stock_snapshot_proto_rawDescData)
	})
	return file_stock_snapshot_proto_rawDescData
}

var file_stock_snapshot_proto_msgTypes = make([]protoimpl.MessageInfo, 1)
var file_stock_snapshot_proto_goTypes = []interface{}{
	(*StockSnapshot)(nil), // 0: model.StockSnapshot
	(*NumberWrapper)(nil), // 1: model.NumberWrapper
}
var file_stock_snapshot_proto_depIdxs = []int32{
	1,  // 0: model.StockSnapshot.currDisplayPrice:type_name -> model.NumberWrapper
	1,  // 1: model.StockSnapshot.currCollectPrice:type_name -> model.NumberWrapper
	1,  // 2: model.StockSnapshot.yesterdayClosePrice:type_name -> model.NumberWrapper
	1,  // 3: model.StockSnapshot.lowestPrice:type_name -> model.NumberWrapper
	1,  // 4: model.StockSnapshot.lastPrice:type_name -> model.NumberWrapper
	1,  // 5: model.StockSnapshot.openPrice:type_name -> model.NumberWrapper
	1,  // 6: model.StockSnapshot.closePrice:type_name -> model.NumberWrapper
	1,  // 7: model.StockSnapshot.highestPrice:type_name -> model.NumberWrapper
	1,  // 8: model.StockSnapshot.tradeVal:type_name -> model.NumberWrapper
	1,  // 9: model.StockSnapshot.totalVal:type_name -> model.NumberWrapper
	1,  // 10: model.StockSnapshot.exchangeRatio:type_name -> model.NumberWrapper
	1,  // 11: model.StockSnapshot.yesterdayCloseIOPV:type_name -> model.NumberWrapper
	1,  // 12: model.StockSnapshot.iopv:type_name -> model.NumberWrapper
	1,  // 13: model.StockSnapshot.dynPERate:type_name -> model.NumberWrapper
	1,  // 14: model.StockSnapshot.peRate:type_name -> model.NumberWrapper
	1,  // 15: model.StockSnapshot.peTTM:type_name -> model.NumberWrapper
	1,  // 16: model.StockSnapshot.pbRate:type_name -> model.NumberWrapper
	1,  // 17: model.StockSnapshot.avgPrice:type_name -> model.NumberWrapper
	1,  // 18: model.StockSnapshot.entrustRate:type_name -> model.NumberWrapper
	1,  // 19: model.StockSnapshot.amountRate:type_name -> model.NumberWrapper
	1,  // 20: model.StockSnapshot.afterTradeVal:type_name -> model.NumberWrapper
	1,  // 21: model.StockSnapshot.yesterdaySettlePrice:type_name -> model.NumberWrapper
	1,  // 22: model.StockSnapshot.settlePrice:type_name -> model.NumberWrapper
	1,  // 23: model.StockSnapshot.totalEntrustBuyAmount:type_name -> model.NumberWrapper
	1,  // 24: model.StockSnapshot.totalEntrustSaleAmount:type_name -> model.NumberWrapper
	1,  // 25: model.StockSnapshot.weightAvgBuyPrice:type_name -> model.NumberWrapper
	1,  // 26: model.StockSnapshot.weightAvgSalePrice:type_name -> model.NumberWrapper
	1,  // 27: model.StockSnapshot.afterTradePrice:type_name -> model.NumberWrapper
	1,  // 28: model.StockSnapshot.flowTotalVal:type_name -> model.NumberWrapper
	1,  // 29: model.StockSnapshot.amplitude:type_name -> model.NumberWrapper
	1,  // 30: model.StockSnapshot.changeRate:type_name -> model.NumberWrapper
	1,  // 31: model.StockSnapshot.premiumRate:type_name -> model.NumberWrapper
	1,  // 32: model.StockSnapshot.equitySwapPrice:type_name -> model.NumberWrapper
	1,  // 33: model.StockSnapshot.equitySwapValue:type_name -> model.NumberWrapper
	1,  // 34: model.StockSnapshot.freeTotalVal:type_name -> model.NumberWrapper
	1,  // 35: model.StockSnapshot.realExchangeRatio:type_name -> model.NumberWrapper
	1,  // 36: model.StockSnapshot.yearChgRatio:type_name -> model.NumberWrapper
	1,  // 37: model.StockSnapshot.day20ChgRatio:type_name -> model.NumberWrapper
	1,  // 38: model.StockSnapshot.callAucTradeVal:type_name -> model.NumberWrapper
	1,  // 39: model.StockSnapshot.stockDividendRatio:type_name -> model.NumberWrapper
	1,  // 40: model.StockSnapshot.expectedRevenue:type_name -> model.NumberWrapper
	41, // [41:41] is the sub-list for method output_type
	41, // [41:41] is the sub-list for method input_type
	41, // [41:41] is the sub-list for extension type_name
	41, // [41:41] is the sub-list for extension extendee
	0,  // [0:41] is the sub-list for field type_name
}

func init() { file_stock_snapshot_proto_init() }
func file_stock_snapshot_proto_init() {
	if File_stock_snapshot_proto != nil {
		return
	}
	file_number_wrapper_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_stock_snapshot_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StockSnapshot); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_stock_snapshot_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   1,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_stock_snapshot_proto_goTypes,
		DependencyIndexes: file_stock_snapshot_proto_depIdxs,
		MessageInfos:      file_stock_snapshot_proto_msgTypes,
	}.Build()
	File_stock_snapshot_proto = out.File
	file_stock_snapshot_proto_rawDesc = nil
	file_stock_snapshot_proto_goTypes = nil
	file_stock_snapshot_proto_depIdxs = nil
}
